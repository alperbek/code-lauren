module.exports = {"404":{"string":"## Couldn't find that page\n\nSorry, this page doesn't seem to exist.\n\n### Return to the [help homepage](#home).\n","html":"<h2 id=\"couldn-t-find-that-page\">Couldn&#39;t find that page</h2>\n<p>Sorry, this page doesn&#39;t seem to exist.</p>\n<h3 id=\"return-to-the-a-href-onclick-pub-loadhelppage-event-home-help-homepage-a-\">Return to the <a href=\"#\" onclick=\"pub.loadHelpPage(event, 'home');\">help homepage</a>.</h3>\n","slug":"404"},"draw-a-circle":{"string":"## Draw a circle\n\nTo draw a circle, use the [draw-oval](#draw-oval) action with an identical `width` and `height`.  For example:\n\n```\ndraw-oval(100 200 40 40 \"filled\" \"blue\")\n```\n\nFor more information on using `draw-oval`, see the [draw-oval help page](#draw-oval).\n","html":"<h2 id=\"draw-a-circle\">Draw a circle</h2>\n<p>To draw a circle, use the <a href=\"#\" onclick=\"pub.loadHelpPage(event, 'draw-oval');\">draw-oval</a> action with an identical <code>width</code> and <code>height</code>.  For example:</p>\n<pre><code>draw-oval(100 200 40 40 &quot;filled&quot; &quot;blue&quot;)\n</code></pre><p>For more information on using <code>draw-oval</code>, see the <a href=\"#\" onclick=\"pub.loadHelpPage(event, 'draw-oval');\">draw-oval help page</a>.</p>\n","slug":"draw-a-circle"},"draw-oval":{"string":"## Draw oval\n\nDraw oval is an action that draws an oval on the screen.  For example, this green oval can be drawn with the code below.\n\n<img alt=\"Green oval draw by code snippet\"\n     src=\"/resources/images/help/draw-oval-1.png\"\n     width=\"434\" height=\"50\" />\n\n```\ndraw-oval(100 200 30 40 \"filled\" \"green\")\n```\n\n<table>\n  <tr>\n    <td>`100`</td>\n    <td>Distance from the left of the screen</td>\n  </tr>\n  <tr>\n    <td>`200`</td>\n    <td>Distance from the top of the screen</td>\n  </tr>\n  <tr>\n    <td>`30`</td>\n    <td>Width of the oval</td>\n  </tr>\n  <tr>\n    <td>`40`</td>\n    <td>Height of the oval</td>\n  </tr>\n  <tr>\n    <td>`\"filled\"`</td>\n    <td>Oval is drawn as a solid shape. Putting `\"unfilled\"` would draw an outline.</td>\n  </tr>\n  <tr>\n    <td>`\"green\"`</td>\n    <td>Color of the oval</td>\n  </tr>\n</table>\n","html":"<h2 id=\"draw-oval\">Draw oval</h2>\n<p>Draw oval is an action that draws an oval on the screen.  For example, this green oval can be drawn with the code below.</p>\n<p><img alt=\"Green oval draw by code snippet\"\n     src=\"/resources/images/help/draw-oval-1.png\"\n     width=\"434\" height=\"50\" /></p>\n<pre><code>draw-oval(100 200 30 40 &quot;filled&quot; &quot;green&quot;)\n</code></pre><table>\n  <tr>\n    <td><code>100</code></td>\n    <td>Distance from the left of the screen</td>\n  </tr>\n  <tr>\n    <td><code>200</code></td>\n    <td>Distance from the top of the screen</td>\n  </tr>\n  <tr>\n    <td><code>30</code></td>\n    <td>Width of the oval</td>\n  </tr>\n  <tr>\n    <td><code>40</code></td>\n    <td>Height of the oval</td>\n  </tr>\n  <tr>\n    <td><code>&quot;filled&quot;</code></td>\n    <td>Oval is drawn as a solid shape. Putting <code>&quot;unfilled&quot;</code> would draw an outline.</td>\n  </tr>\n  <tr>\n    <td><code>&quot;green&quot;</code></td>\n    <td>Color of the oval</td>\n  </tr>\n</table>\n","slug":"draw-oval"},"fixing-code-using-the-player-controls":{"string":"## Fixing code using the player controls\n\nHow to fix a problem in your code:\n\n1. Find the cause of the problem.\n2. Change your code to remove the cause of the problem.\n\nThe player controls can help you with this process.  In the short video below, I write a very simple program that has a problem.  I run my program slowly using the player controls.  This slow running lets me see what causes the problem, and how to fix it.\n\n<video class=\"video-js vjs-default-skin\"\n  controls preload=\"auto\" width=\"425\" height=\"358\">\n <source src=\"/resources/videos/fixing-code-using-the-player-controls.mp4\" type='video/mp4' />\n <p class=\"vjs-no-js\">The video doesn't work in your web browser.  If you have time, please email <a href=\"mailto:mary@maryrosecook.com\">mary@maryrosecook.com</a> and I will try and fix the problem.</p>\n</video>\n","html":"<h2 id=\"fixing-code-using-the-player-controls\">Fixing code using the player controls</h2>\n<p>How to fix a problem in your code:</p>\n<ol>\n<li>Find the cause of the problem.</li>\n<li>Change your code to remove the cause of the problem.</li>\n</ol>\n<p>The player controls can help you with this process.  In the short video below, I write a very simple program that has a problem.  I run my program slowly using the player controls.  This slow running lets me see what causes the problem, and how to fix it.</p>\n<video class=\"video-js vjs-default-skin\"\n  controls preload=\"auto\" width=\"425\" height=\"358\">\n <source src=\"/resources/videos/fixing-code-using-the-player-controls.mp4\" type='video/mp4' />\n <p class=\"vjs-no-js\">The video doesn&#39;t work in your web browser.  If you have time, please email <a href=\"mailto:mary@maryrosecook.com\">mary@maryrosecook.com</a> and I will try and fix the problem.</p>\n</video>\n","slug":"fixing-code-using-the-player-controls"},"flashing-light":{"string":"## Flashing light\n\nCode that makes a light flash from red to blue:\n\n```\ncolor: \"red\"\n\nforever {\n  if counted(40) {\n    if equal(color \"red\") {\n      color: \"blue\"\n    } else {\n      color: \"red\"\n    }\n  }\n\n  clear-screen()\n  draw-oval(300 20 150 150 \"filled\" color)\n}\n```\n","html":"<h2 id=\"flashing-light\">Flashing light</h2>\n<p>Code that makes a light flash from red to blue:</p>\n<pre><code>color: &quot;red&quot;\n\nforever {\n  if counted(40) {\n    if equal(color &quot;red&quot;) {\n      color: &quot;blue&quot;\n    } else {\n      color: &quot;red&quot;\n    }\n  }\n\n  clear-screen()\n  draw-oval(300 20 150 150 &quot;filled&quot; color)\n}\n</code></pre>","slug":"flashing-light"},"home":{"string":"## Make video games and learn to code. No experience necessary.\n\nTry changing `\"blue\"` to `\"red\"` in the code on the left.\n\nTry some other colors.\n\n### <div class=\"next\">[Start the first tutorial →](#first-index)</div>\n","html":"<h2 id=\"make-video-games-and-learn-to-code-no-experience-necessary-\">Make video games and learn to code. No experience necessary.</h2>\n<p>Try changing <code>&quot;blue&quot;</code> to <code>&quot;red&quot;</code> in the code on the left.</p>\n<p>Try some other colors.</p>\n<h3 id=\"-div-class-next-a-href-onclick-pub-loadhelppage-event-first-index-start-the-first-tutorial-a-div-\"><div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-index');\">Start the first tutorial →</a></div></h3>\n","slug":"home"},"share-program":{"string":"## Share your program\n\nTo send your program to someone else, copy the link below and paste it into an email, tweet or Facebook update:\n\n<pre><code id=\"program-link\">No program to share</code></pre>\n\nAlternatively, at any time, you can copy the link in the address bar of your browser and send that.\n","html":"<h2 id=\"share-your-program\">Share your program</h2>\n<p>To send your program to someone else, copy the link below and paste it into an email, tweet or Facebook update:</p>\n<pre><code id=\"program-link\">No program to share</code></pre>\n\n<p>Alternatively, at any time, you can copy the link in the address bar of your browser and send that.</p>\n","slug":"share-program"},"suggestions-for-improvement":{"string":"## Suggestions for improvement\n\nHello! I'm Mary. I made Code Lauren. I'd love to hear any feedback you have.\n\nDid anything confuse you? Did the website behave weirdly? Would you like to learn to code in a different way? Would you like a tutorial on anything specific?\n\nPlease send any and all thoughts to [mary@maryrosecook.com](mailto:mary@maryrosecook.com)\n","html":"<h2 id=\"suggestions-for-improvement\">Suggestions for improvement</h2>\n<p>Hello! I&#39;m Mary. I made Code Lauren. I&#39;d love to hear any feedback you have.</p>\n<p>Did anything confuse you? Did the website behave weirdly? Would you like to learn to code in a different way? Would you like a tutorial on anything specific?</p>\n<p>Please send any and all thoughts to <a href=\"mailto:mary@maryrosecook.com\">mary@maryrosecook.com</a></p>\n","slug":"suggestions-for-improvement"},"tutorials":{"string":"## Tutorials\n\n1. [Your first program - roll a ball across the screen](#first-index)\n2. [Drive a car across the screen](#car-index)\n","html":"<h2 id=\"tutorials\">Tutorials</h2>\n<ol>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-index');\">Your first program - roll a ball across the screen</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-index');\">Drive a car across the screen</a></li>\n</ol>\n","slug":"tutorials"},"car-moving-a-rectangle":{"string":"## Moving a rectangle\n\nWrite some code that makes a blue rectangle move across the screen. If you've done the first tutorial and aren't sure how to start, refresh your memory by looking at the [moving an oval](#first-moving-an-oval) section of the end of the first tutorial.\n\n ### [← Previous](#car-index) <div class=\"next\">[Moving two shapes together →](#car-moving-two-shapes-together)</div>","html":"<h2 id=\"moving-a-rectangle\">Moving a rectangle</h2>\n<p>Write some code that makes a blue rectangle move across the screen. If you&#39;ve done the first tutorial and aren&#39;t sure how to start, refresh your memory by looking at the <a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-moving-an-oval');\">moving an oval</a> section of the end of the first tutorial.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-car-index-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-car-moving-two-shapes-together-moving-two-shapes-together-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-index');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-moving-two-shapes-together');\">Moving two shapes together →</a></div></h3>\n","slug":"car-moving-a-rectangle"},"car-moving-two-shapes-together":{"string":"## Moving two shapes together\n\nDid you write some code that moves a rectangle across the screen? Maybe your code looks something like this:\n\n```\nleft-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n  draw-rectangle(left-dist\n                 300\n                 150\n                 30\n                 \"filled\"\n                 \"blue\")\n}\n```\n\n### The blue rectangle\n\nIf your rectangle is not blue, set the color of your rectangle to `\"blue\"`.\n\n### The red rectangle\n\nAdd another line of code that draws a rectangle that has its center `100` from the left of the screen and `200` from the top.  Make it `10` wide, `300` tall and colored `\"red\"`.\n\n### Move the two rectangles\n\nMake the red rectangle move along with blue rectangle.\n\nIf you're not sure how to do this, look at the line of code for the blue rectangle.  It uses a label called `left-dist` (or something like that) to describe how far from the left of the screen to draw the rectangle.  There is also a line of code that increases `left-dist` (or whatever it's called in your program).  Because this line is inside the `forever`, it's called over and over, so `left-dist` keeps on increasing.  This means that, each time the line of code that draws the blue rectangle is called, the rectangle is drawn in a new place.  You can use the same approach to move the red rectangle.\n\nIf you're still unsure, use the player controls at the top of the page to run your program step by step.\n\n[Learn more about how to use the player controls to figure out what your program is doing and how to make it do what you want](#fixing-code-using-the-player-controls).\n\n ### [← Previous](#car-moving-a-rectangle) <div class=\"next\">[Offsetting two moving shapes →](#car-offsetting-two-moving-shapes)</div>","html":"<h2 id=\"moving-two-shapes-together\">Moving two shapes together</h2>\n<p>Did you write some code that moves a rectangle across the screen? Maybe your code looks something like this:</p>\n<pre><code>left-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n  draw-rectangle(left-dist\n                 300\n                 150\n                 30\n                 &quot;filled&quot;\n                 &quot;blue&quot;)\n}\n</code></pre><h3 id=\"the-blue-rectangle\">The blue rectangle</h3>\n<p>If your rectangle is not blue, set the color of your rectangle to <code>&quot;blue&quot;</code>.</p>\n<h3 id=\"the-red-rectangle\">The red rectangle</h3>\n<p>Add another line of code that draws a rectangle that has its center <code>100</code> from the left of the screen and <code>200</code> from the top.  Make it <code>10</code> wide, <code>300</code> tall and colored <code>&quot;red&quot;</code>.</p>\n<h3 id=\"move-the-two-rectangles\">Move the two rectangles</h3>\n<p>Make the red rectangle move along with blue rectangle.</p>\n<p>If you&#39;re not sure how to do this, look at the line of code for the blue rectangle.  It uses a label called <code>left-dist</code> (or something like that) to describe how far from the left of the screen to draw the rectangle.  There is also a line of code that increases <code>left-dist</code> (or whatever it&#39;s called in your program).  Because this line is inside the <code>forever</code>, it&#39;s called over and over, so <code>left-dist</code> keeps on increasing.  This means that, each time the line of code that draws the blue rectangle is called, the rectangle is drawn in a new place.  You can use the same approach to move the red rectangle.</p>\n<p>If you&#39;re still unsure, use the player controls at the top of the page to run your program step by step.</p>\n<p><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'fixing-code-using-the-player-controls');\">Learn more about how to use the player controls to figure out what your program is doing and how to make it do what you want</a>.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-car-moving-a-rectangle-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-car-offsetting-two-moving-shapes-offsetting-two-moving-shapes-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-moving-a-rectangle');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-offsetting-two-moving-shapes');\">Offsetting two moving shapes →</a></div></h3>\n","slug":"car-moving-two-shapes-together"},"car-offsetting-two-moving-shapes":{"string":"## Offsetting two moving shapes\n\nOn the previous page, you wrote a program that moved two rectangles along together.  Your code might look something like this:\n\n```\nleft-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n\n  draw-rectangle(left-dist\n                 300\n                 150\n                 30\n                 \"filled\"\n                 \"blue\")\n\n  draw-rectangle(left-dist\n                 200\n                 10\n                 300\n                 \"filled\"\n                 \"red\")\n}\n```\n\nDoes your code use one name for the distance of the centers of both rectangles from the left (as the code above does with `left-dist`)? Or does your code use a different name for each rectangle (eg `left-dist-one` and `left-dist-two`)?\n\nIf your code uses two different names, change it so it only uses one.  This makes your code shorter and, therefore, easier to understand.\n\n### Making the blue and red rectangle look like a car\n\nOn this page, you will turn the blue rectangle into the bottom of the car and the red rectangle into the top:\n\n<img alt=\"Red box on top of blue box to represent a car\"\n     src=\"/resources/images/help/offsetting-two-moving-shapes-car.png\"\n     width=\"434\" height=\"100\" />\n\n#### Rectangles of the right sizes\n\nChange the width and height of the rectangles so the red one is smaller than the blue one.\n\n#### Rectangles nearly in the right places\n\nGet the red rectangle perched on top of the blue rectangle.  To do this, change the numbers that describe the distance that the center of each rectangle is from the top of the screen.\n\n#### Rectangles really in the right places\n\nThe rectangles are in the right place vertically.  Now they need to be in the right place horizontally.\n\nThis is a little trickier.  You were able to get the top rectangle on top of the bottom rectangle because you could directly change the numbers that describe the distance of each rectangle from the top of the screen.  To get the red rectangle centered over the blue rectangle, you need to put the centers of two rectangles at different distances from the left.  But both rectangles use the same name to describe the distance of their centers from the left, so they always have the same distance from the left!\n\nTry using `add` to modify the distance of the center of one of the rectangles from the left.  For example, look at the code below.  It draws a green oval on the left and a yellow oval on the right.\n\n`start` describes how far the green oval's center is from the left of the screen.  But `add(start 200)` is used to describe how far the yellow oval's center is from the left.  This means that `200` is added to `start` to get how far the yellow oval's center is from the left.  Which means that the yellow oval is drawn on the right of the green oval.\n\n```\nstart: 100\n\ndraw-oval(start 100 100 100 \"filled\" \"green\")\ndraw-oval(add(start 200)\n          100\n          100\n          100\n          \"filled\"\n          \"yellow\")\n```\n\nUse the technique in the code above to get the red top rectangle of your car centered over the blue bottom rectangle.\n\n ### [← Previous](#car-moving-two-shapes-together) <div class=\"next\">[Offsetting many moving shapes →](#car-offsetting-many-moving-shapes)</div>","html":"<h2 id=\"offsetting-two-moving-shapes\">Offsetting two moving shapes</h2>\n<p>On the previous page, you wrote a program that moved two rectangles along together.  Your code might look something like this:</p>\n<pre><code>left-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n\n  draw-rectangle(left-dist\n                 300\n                 150\n                 30\n                 &quot;filled&quot;\n                 &quot;blue&quot;)\n\n  draw-rectangle(left-dist\n                 200\n                 10\n                 300\n                 &quot;filled&quot;\n                 &quot;red&quot;)\n}\n</code></pre><p>Does your code use one name for the distance of the centers of both rectangles from the left (as the code above does with <code>left-dist</code>)? Or does your code use a different name for each rectangle (eg <code>left-dist-one</code> and <code>left-dist-two</code>)?</p>\n<p>If your code uses two different names, change it so it only uses one.  This makes your code shorter and, therefore, easier to understand.</p>\n<h3 id=\"making-the-blue-and-red-rectangle-look-like-a-car\">Making the blue and red rectangle look like a car</h3>\n<p>On this page, you will turn the blue rectangle into the bottom of the car and the red rectangle into the top:</p>\n<p><img alt=\"Red box on top of blue box to represent a car\"\n     src=\"/resources/images/help/offsetting-two-moving-shapes-car.png\"\n     width=\"434\" height=\"100\" /></p>\n<h4 id=\"rectangles-of-the-right-sizes\">Rectangles of the right sizes</h4>\n<p>Change the width and height of the rectangles so the red one is smaller than the blue one.</p>\n<h4 id=\"rectangles-nearly-in-the-right-places\">Rectangles nearly in the right places</h4>\n<p>Get the red rectangle perched on top of the blue rectangle.  To do this, change the numbers that describe the distance that the center of each rectangle is from the top of the screen.</p>\n<h4 id=\"rectangles-really-in-the-right-places\">Rectangles really in the right places</h4>\n<p>The rectangles are in the right place vertically.  Now they need to be in the right place horizontally.</p>\n<p>This is a little trickier.  You were able to get the top rectangle on top of the bottom rectangle because you could directly change the numbers that describe the distance of each rectangle from the top of the screen.  To get the red rectangle centered over the blue rectangle, you need to put the centers of two rectangles at different distances from the left.  But both rectangles use the same name to describe the distance of their centers from the left, so they always have the same distance from the left!</p>\n<p>Try using <code>add</code> to modify the distance of the center of one of the rectangles from the left.  For example, look at the code below.  It draws a green oval on the left and a yellow oval on the right.</p>\n<p><code>start</code> describes how far the green oval&#39;s center is from the left of the screen.  But <code>add(start 200)</code> is used to describe how far the yellow oval&#39;s center is from the left.  This means that <code>200</code> is added to <code>start</code> to get how far the yellow oval&#39;s center is from the left.  Which means that the yellow oval is drawn on the right of the green oval.</p>\n<pre><code>start: 100\n\ndraw-oval(start 100 100 100 &quot;filled&quot; &quot;green&quot;)\ndraw-oval(add(start 200)\n          100\n          100\n          100\n          &quot;filled&quot;\n          &quot;yellow&quot;)\n</code></pre><p>Use the technique in the code above to get the red top rectangle of your car centered over the blue bottom rectangle.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-car-moving-two-shapes-together-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-car-offsetting-many-moving-shapes-offsetting-many-moving-shapes-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-moving-two-shapes-together');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-offsetting-many-moving-shapes');\">Offsetting many moving shapes →</a></div></h3>\n","slug":"car-offsetting-two-moving-shapes"},"car-offsetting-many-moving-shapes":{"string":"## Offsetting many moving shapes\n\nOn the previous page, you got the body of the car looking like a car and moving along.  Your code might look something like this:\n\n```\nleft-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n\n  draw-rectangle(left-dist\n                 240\n                 150\n                 30\n                 \"filled\"\n                 \"blue\")\n\n  draw-rectangle(add(left-dist 40)\n                 200\n                 70\n                 40\n                 \"filled\"\n                 \"red\")\n}\n```\n\n### Adding some wheels\n\nAdd some code to your program that draws some yellow wheels on the car.  Use the techniques on the previous page to position the wheels on opposite ends of the bottom of the car.\n\n ### [← Previous](#car-offsetting-two-moving-shapes) <div class=\"next\">[Final code for the car →](#car-final-code)</div>","html":"<h2 id=\"offsetting-many-moving-shapes\">Offsetting many moving shapes</h2>\n<p>On the previous page, you got the body of the car looking like a car and moving along.  Your code might look something like this:</p>\n<pre><code>left-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n\n  draw-rectangle(left-dist\n                 240\n                 150\n                 30\n                 &quot;filled&quot;\n                 &quot;blue&quot;)\n\n  draw-rectangle(add(left-dist 40)\n                 200\n                 70\n                 40\n                 &quot;filled&quot;\n                 &quot;red&quot;)\n}\n</code></pre><h3 id=\"adding-some-wheels\">Adding some wheels</h3>\n<p>Add some code to your program that draws some yellow wheels on the car.  Use the techniques on the previous page to position the wheels on opposite ends of the bottom of the car.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-car-offsetting-two-moving-shapes-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-car-final-code-final-code-for-the-car-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-offsetting-two-moving-shapes');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-final-code');\">Final code for the car →</a></div></h3>\n","slug":"car-offsetting-many-moving-shapes"},"car-final-code":{"string":"## Final code for the car\n\nOn the previous page, you attached some wheels that moved along with the body of the car.  Your code might look something like this:\n\n```\nleft-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n\n  draw-rectangle(left-dist\n                 240\n                 150\n                 30\n                 \"filled\"\n                 \"blue\")\n\n  draw-rectangle(add(left-dist 40)\n                 200\n                 70\n                 40\n                 \"filled\"\n                 \"red\")\n\n  draw-oval(add(left-dist 15)\n            260\n            30\n            30\n            \"filled\"\n            \"yellow\")\n\n  draw-oval(add(left-dist 110)\n            260\n            30\n            30\n            \"filled\"\n            \"yellow\")\n}\n```\n\n### Wrap-up\n\nIf you got the car working with all the parts - great job!\n\nIf you didn't get the car working - no worries.  Try using the player controls at the top of the page to figure out what your program is doing and how to make it do what you want.  Or type in the code above and use the player controls to figure out how it works.\n\n[Learn more about how to use the player controls](#fixing-code-using-the-player-controls).\n\nIf you stay stuck, please email [mary@maryrosecook.com](mailto:mary@maryrosecook.com) and I can help.\n\n ### [← Previous](#car-offsetting-many-moving-shapes) ","html":"<h2 id=\"final-code-for-the-car\">Final code for the car</h2>\n<p>On the previous page, you attached some wheels that moved along with the body of the car.  Your code might look something like this:</p>\n<pre><code>left-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n\n  draw-rectangle(left-dist\n                 240\n                 150\n                 30\n                 &quot;filled&quot;\n                 &quot;blue&quot;)\n\n  draw-rectangle(add(left-dist 40)\n                 200\n                 70\n                 40\n                 &quot;filled&quot;\n                 &quot;red&quot;)\n\n  draw-oval(add(left-dist 15)\n            260\n            30\n            30\n            &quot;filled&quot;\n            &quot;yellow&quot;)\n\n  draw-oval(add(left-dist 110)\n            260\n            30\n            30\n            &quot;filled&quot;\n            &quot;yellow&quot;)\n}\n</code></pre><h3 id=\"wrap-up\">Wrap-up</h3>\n<p>If you got the car working with all the parts - great job!</p>\n<p>If you didn&#39;t get the car working - no worries.  Try using the player controls at the top of the page to figure out what your program is doing and how to make it do what you want.  Or type in the code above and use the player controls to figure out how it works.</p>\n<p><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'fixing-code-using-the-player-controls');\">Learn more about how to use the player controls</a>.</p>\n<p>If you stay stuck, please email <a href=\"mailto:mary@maryrosecook.com\">mary@maryrosecook.com</a> and I can help.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-car-offsetting-many-moving-shapes-previous-a-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-offsetting-many-moving-shapes');\">← Previous</a></h3>\n","slug":"car-final-code"},"car-index":{"string":"## Drive a car across the screen\n\nIn this tutorial, you'll write some code that draws a simple car and moves it across the screen.  To understand how to do this, you'll need to have done the [first tutorial](#first-draw-an-oval).\n\nStart by clicking on \"Moving a rectangle\" below:\n\n1. [Moving a rectangle](#car-moving-a-rectangle)\n1. [Moving two shapes together](#car-moving-two-shapes-together)\n1. [Offsetting two moving shapes](#car-offsetting-two-moving-shapes)\n1. [Offsetting many moving shapes](#car-offsetting-many-moving-shapes)\n1. [Final code](#car-final-code)\n","html":"<h2 id=\"drive-a-car-across-the-screen\">Drive a car across the screen</h2>\n<p>In this tutorial, you&#39;ll write some code that draws a simple car and moves it across the screen.  To understand how to do this, you&#39;ll need to have done the <a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-an-oval');\">first tutorial</a>.</p>\n<p>Start by clicking on &quot;Moving a rectangle&quot; below:</p>\n<ol>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-moving-a-rectangle');\">Moving a rectangle</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-moving-two-shapes-together');\">Moving two shapes together</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-offsetting-two-moving-shapes');\">Offsetting two moving shapes</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-offsetting-many-moving-shapes');\">Offsetting many moving shapes</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'car-final-code');\">Final code</a></li>\n</ol>\n","slug":"car-index"},"first-draw-an-oval":{"string":"## Draw an oval\n\nLet's write your first program.\n\nDelete all the code in the area on the left.  Type in the code below.\n\n```\ndraw-oval(100 200 30 40 \"filled\" \"blue\")\n```\n\nDo you see a blue oval?\n\n### Make the oval an outline\n\nTry changing `\"filled\"` to `\"unfilled\"`.\n\n### Change the position and size\n\nTry changing the numbers. They describe:\n\n1. How far from the top the oval is.\n2. How far from the left the oval is.\n3. How wide wide the oval is.\n4. How tall the oval is.\n\nWhich one is which?\n\nDo the numbers that describe the position of the oval indicate the middle of the oval or the top left of the oval? To put the question another way, will the oval described by the code below be half off the screen or fully visible?\n\n```\ndraw-oval(0 0 100 100 \"filled\" \"pink\")\n```\n\nWhat about this one?\n\n```\ndraw-oval(-50 -50 100 100 \"filled\" \"pink\")\n```\n\nType in the code to find out!\n\n ### [← Previous](#first-index) <div class=\"next\">[Draw lots of ovals →](#first-draw-lots-of-ovals)</div>","html":"<h2 id=\"draw-an-oval\">Draw an oval</h2>\n<p>Let&#39;s write your first program.</p>\n<p>Delete all the code in the area on the left.  Type in the code below.</p>\n<pre><code>draw-oval(100 200 30 40 &quot;filled&quot; &quot;blue&quot;)\n</code></pre><p>Do you see a blue oval?</p>\n<h3 id=\"make-the-oval-an-outline\">Make the oval an outline</h3>\n<p>Try changing <code>&quot;filled&quot;</code> to <code>&quot;unfilled&quot;</code>.</p>\n<h3 id=\"change-the-position-and-size\">Change the position and size</h3>\n<p>Try changing the numbers. They describe:</p>\n<ol>\n<li>How far from the top the oval is.</li>\n<li>How far from the left the oval is.</li>\n<li>How wide wide the oval is.</li>\n<li>How tall the oval is.</li>\n</ol>\n<p>Which one is which?</p>\n<p>Do the numbers that describe the position of the oval indicate the middle of the oval or the top left of the oval? To put the question another way, will the oval described by the code below be half off the screen or fully visible?</p>\n<pre><code>draw-oval(0 0 100 100 &quot;filled&quot; &quot;pink&quot;)\n</code></pre><p>What about this one?</p>\n<pre><code>draw-oval(-50 -50 100 100 &quot;filled&quot; &quot;pink&quot;)\n</code></pre><p>Type in the code to find out!</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-index-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-draw-lots-of-ovals-draw-lots-of-ovals-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-index');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-lots-of-ovals');\">Draw lots of ovals →</a></div></h3>\n","slug":"first-draw-an-oval"},"first-draw-lots-of-ovals":{"string":"## Draw lots of ovals\n\nDraw some more ovals. You can do this by adding more lines of code to your program. For example:\n\n```\ndraw-oval(100 300 30 40 \"filled\" \"pink\")\ndraw-oval(100 400 30 40 \"filled\" \"green\")\n```\n\n### Arrange the ovals in a shape\n\nTry and make a line of ovals.\n\n ### [← Previous](#first-draw-an-oval) <div class=\"next\">[Draw a rectangle →](#first-draw-a-rectangle)</div>","html":"<h2 id=\"draw-lots-of-ovals\">Draw lots of ovals</h2>\n<p>Draw some more ovals. You can do this by adding more lines of code to your program. For example:</p>\n<pre><code>draw-oval(100 300 30 40 &quot;filled&quot; &quot;pink&quot;)\ndraw-oval(100 400 30 40 &quot;filled&quot; &quot;green&quot;)\n</code></pre><h3 id=\"arrange-the-ovals-in-a-shape\">Arrange the ovals in a shape</h3>\n<p>Try and make a line of ovals.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-draw-an-oval-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-draw-a-rectangle-draw-a-rectangle-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-an-oval');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-a-rectangle');\">Draw a rectangle →</a></div></h3>\n","slug":"first-draw-lots-of-ovals"},"first-draw-a-rectangle":{"string":"## Draw a rectangle\n\nDelete all the code on the left.  Then type in the code below to draw a rectangle.\n\nWhen I say \"type in the code\", I really mean it. There is a world of difference between typing in the code and either copying and pasting it or just taking my word for what the code does.  Learning to program is about experimenting.  Play around.  Try things I haven't suggested. Guess what some code will do, then see if you're right.\n\nGo ahead and type this in:\n\n```\ndraw-rectangle(100 200 50 150 \"filled\" \"gray\")\n```\n\n### Ordering the items in the description of a shape\n\nIn the line of code you wrote to describe the rectangle, swap the places of `100` and `\"gray\"`.  The line of code should now look like this:\n\n```\ndraw-rectangle(\"gray\" 200 50 150 \"filled\" 100)\n```\n\nWhat happened?\n\nYep, the rectangle is gone. The order you write things in matters. `draw-rectangle` expected the first item it its description to be a number that says how far from the left the rectangle is.  Instead, it got a color. Without understanding all the pieces of the description, it couldn't do its job.\n\n ### [← Previous](#first-draw-lots-of-ovals) <div class=\"next\">[Naming things →](#first-naming-things)</div>","html":"<h2 id=\"draw-a-rectangle\">Draw a rectangle</h2>\n<p>Delete all the code on the left.  Then type in the code below to draw a rectangle.</p>\n<p>When I say &quot;type in the code&quot;, I really mean it. There is a world of difference between typing in the code and either copying and pasting it or just taking my word for what the code does.  Learning to program is about experimenting.  Play around.  Try things I haven&#39;t suggested. Guess what some code will do, then see if you&#39;re right.</p>\n<p>Go ahead and type this in:</p>\n<pre><code>draw-rectangle(100 200 50 150 &quot;filled&quot; &quot;gray&quot;)\n</code></pre><h3 id=\"ordering-the-items-in-the-description-of-a-shape\">Ordering the items in the description of a shape</h3>\n<p>In the line of code you wrote to describe the rectangle, swap the places of <code>100</code> and <code>&quot;gray&quot;</code>.  The line of code should now look like this:</p>\n<pre><code>draw-rectangle(&quot;gray&quot; 200 50 150 &quot;filled&quot; 100)\n</code></pre><p>What happened?</p>\n<p>Yep, the rectangle is gone. The order you write things in matters. <code>draw-rectangle</code> expected the first item it its description to be a number that says how far from the left the rectangle is.  Instead, it got a color. Without understanding all the pieces of the description, it couldn&#39;t do its job.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-draw-lots-of-ovals-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-naming-things-naming-things-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-lots-of-ovals');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-naming-things');\">Naming things →</a></div></h3>\n","slug":"first-draw-a-rectangle"},"first-naming-things":{"string":"## Naming things\n\n\nEarlier, I suggested you make a line of ovals. You might have noticed that you were repeating numbers.\n\nDelete all the code on the left. Type in this code:\n\n```\ndraw-oval(200 200 30 40 \"filled\" \"blue\")\ndraw-oval(250 200 30 40 \"filled\" \"red\")\n```\n\nNotice how `200`, the description of how far the center of the oval is from the top of the screen, appears twice.  `30`, the width of the ovals, appears twice. The height appears twice, too.\n\n### Name the distance from the top\n\nUsing the code below, you could name the distance of the center of the ovals from the top:\n\n```\ntop-dist: 200\n```\n\nThen you could use the name in place of the distances.\n\nLet's do that. Delete all the code on the left. Type in this code:\n\n```\ntop-dist: 200\n\ndraw-oval(200 top-dist 30 40 \"filled\" \"blue\")\ndraw-oval(250 top-dist 30 40 \"filled\" \"red\")\n```\n\nNotice how the code sets `top-dist` to `200` and replaces the `200`s with `top-dist` in the `draw-oval` actions.\n\n### Change the distance from the top\n\nChange the number that `top-dist` describes. For example, you could change it to `300`.\n\n```\ntop-dist: 300\n\ndraw-oval(200 top-dist 30 40 \"filled\" \"blue\")\ndraw-oval(250 top-dist 30 40 \"filled\" \"red\")\n```\n\n### Naming something makes it easy to change\n\nNotice how easy it was to move both ovals at once.  You needed to change just one number.\n\n### Naming something describes it\n\nNotice how easy it was to figure out which number to change. Names describe the meaning of the numbers they represent.\n\n### Name the width\n\nAdd a name for the width and use it in your [`draw-oval`](#draw-oval) descriptions.\n\n ### [← Previous](#first-draw-a-rectangle) <div class=\"next\">[Writing text →](#first-writing-text)</div>","html":"<h2 id=\"naming-things\">Naming things</h2>\n<p>Earlier, I suggested you make a line of ovals. You might have noticed that you were repeating numbers.</p>\n<p>Delete all the code on the left. Type in this code:</p>\n<pre><code>draw-oval(200 200 30 40 &quot;filled&quot; &quot;blue&quot;)\ndraw-oval(250 200 30 40 &quot;filled&quot; &quot;red&quot;)\n</code></pre><p>Notice how <code>200</code>, the description of how far the center of the oval is from the top of the screen, appears twice.  <code>30</code>, the width of the ovals, appears twice. The height appears twice, too.</p>\n<h3 id=\"name-the-distance-from-the-top\">Name the distance from the top</h3>\n<p>Using the code below, you could name the distance of the center of the ovals from the top:</p>\n<pre><code>top-dist: 200\n</code></pre><p>Then you could use the name in place of the distances.</p>\n<p>Let&#39;s do that. Delete all the code on the left. Type in this code:</p>\n<pre><code>top-dist: 200\n\ndraw-oval(200 top-dist 30 40 &quot;filled&quot; &quot;blue&quot;)\ndraw-oval(250 top-dist 30 40 &quot;filled&quot; &quot;red&quot;)\n</code></pre><p>Notice how the code sets <code>top-dist</code> to <code>200</code> and replaces the <code>200</code>s with <code>top-dist</code> in the <code>draw-oval</code> actions.</p>\n<h3 id=\"change-the-distance-from-the-top\">Change the distance from the top</h3>\n<p>Change the number that <code>top-dist</code> describes. For example, you could change it to <code>300</code>.</p>\n<pre><code>top-dist: 300\n\ndraw-oval(200 top-dist 30 40 &quot;filled&quot; &quot;blue&quot;)\ndraw-oval(250 top-dist 30 40 &quot;filled&quot; &quot;red&quot;)\n</code></pre><h3 id=\"naming-something-makes-it-easy-to-change\">Naming something makes it easy to change</h3>\n<p>Notice how easy it was to move both ovals at once.  You needed to change just one number.</p>\n<h3 id=\"naming-something-describes-it\">Naming something describes it</h3>\n<p>Notice how easy it was to figure out which number to change. Names describe the meaning of the numbers they represent.</p>\n<h3 id=\"name-the-width\">Name the width</h3>\n<p>Add a name for the width and use it in your <a href=\"#\" onclick=\"pub.loadHelpPage(event, 'draw-oval');\"><code>draw-oval</code></a> descriptions.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-draw-a-rectangle-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-writing-text-writing-text-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-a-rectangle');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-writing-text');\">Writing text →</a></div></h3>\n","slug":"first-naming-things"},"first-writing-text":{"string":"## Writing text\n\nYou can write text on the screen with the `write` action.  Delete all the code on the left. Type in this code:\n\n```\nwrite(\"hi\" 200 200 \"black\")\n```\n\nUsing the `write` action is a super-easy way to look at the number that a name is pointed at.  For example, change the code on the left so it looks like this:\n\n```\nnumber: 103\n\nwrite(number 200 200 \"black\")\n```\n\nWhy would you want to do this? You'll see!\n\n ### [← Previous](#first-naming-things) <div class=\"next\">[Adding numbers →](#first-adding-numbers)</div>","html":"<h2 id=\"writing-text\">Writing text</h2>\n<p>You can write text on the screen with the <code>write</code> action.  Delete all the code on the left. Type in this code:</p>\n<pre><code>write(&quot;hi&quot; 200 200 &quot;black&quot;)\n</code></pre><p>Using the <code>write</code> action is a super-easy way to look at the number that a name is pointed at.  For example, change the code on the left so it looks like this:</p>\n<pre><code>number: 103\n\nwrite(number 200 200 &quot;black&quot;)\n</code></pre><p>Why would you want to do this? You&#39;ll see!</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-naming-things-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-adding-numbers-adding-numbers-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-naming-things');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-adding-numbers');\">Adding numbers →</a></div></h3>\n","slug":"first-writing-text"},"first-adding-numbers":{"string":"## Adding numbers\n\nAs well as drawing shapes, actions can be used for many other things.  For example: adding numbers. Delete all the code on the left. Type in this code:\n\n```\nwrite(add(1 2) 200 200 \"black\")\n```\n\nWhat happened?\n\nThe `add` action was given `1` and `2` and it added them.  `add` gave back the answer, `3`, to the `write` action which wrote it on the screen.\n\n ### [← Previous](#first-writing-text) <div class=\"next\">[Naming the result of an action →](#first-naming-the-result-of-an-action)</div>","html":"<h2 id=\"adding-numbers\">Adding numbers</h2>\n<p>As well as drawing shapes, actions can be used for many other things.  For example: adding numbers. Delete all the code on the left. Type in this code:</p>\n<pre><code>write(add(1 2) 200 200 &quot;black&quot;)\n</code></pre><p>What happened?</p>\n<p>The <code>add</code> action was given <code>1</code> and <code>2</code> and it added them.  <code>add</code> gave back the answer, <code>3</code>, to the <code>write</code> action which wrote it on the screen.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-writing-text-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-naming-the-result-of-an-action-naming-the-result-of-an-action-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-writing-text');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-naming-the-result-of-an-action');\">Naming the result of an action →</a></div></h3>\n","slug":"first-adding-numbers"},"first-naming-the-result-of-an-action":{"string":"## Naming the result of an action\n\nDelete the code on the left. Type in this code:\n\n```\naddition-answer: add(1 2)\nwrite(addition-answer 600 200 \"black\")\n```\n\nThis is interesting. You created a new number, `3`, by giving `1` and `2` to the `add` action.  You then named the new number `addition-answer`.\n\n ### [← Previous](#first-adding-numbers) <div class=\"next\">[Reusing a name →](#first-reusing-a-name)</div>","html":"<h2 id=\"naming-the-result-of-an-action\">Naming the result of an action</h2>\n<p>Delete the code on the left. Type in this code:</p>\n<pre><code>addition-answer: add(1 2)\nwrite(addition-answer 600 200 &quot;black&quot;)\n</code></pre><p>This is interesting. You created a new number, <code>3</code>, by giving <code>1</code> and <code>2</code> to the <code>add</code> action.  You then named the new number <code>addition-answer</code>.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-adding-numbers-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-reusing-a-name-reusing-a-name-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-adding-numbers');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-reusing-a-name');\">Reusing a name →</a></div></h3>\n","slug":"first-naming-the-result-of-an-action"},"first-reusing-a-name":{"string":"## Reusing a name\n\n### Repeated additions\n\nDelete the code on the left. Type in this code:\n\n```\nfirst-number: 1\nwrite(first-number 600 200 \"black\")\n\nsecond-number: add(first-number 2)\nwrite(second-number 600 230 \"black\")\n```\n\nYou created `second-number` by giving `first-number` and `2` to the `add` action.  That is, you created a number from an existing name and gave that number a new name.\n\n### Reusing a name\n\nBut why bother making a new name? Why not just reuse the old one? Change the code on the left to this:\n\n```\nnumber: 1\nwrite(number 600 200 \"black\")\n\nnumber: add(number 2)\nwrite(number 600 230 \"black\")\n```\n\nDo you see how `number` was reused as the name of the result of adding `number` and `2`? Why is that useful? Let's find out...\n\n ### [← Previous](#first-naming-the-result-of-an-action) <div class=\"next\">[Doing an action a lot of times →](#first-doing-an-action-a-lot-of-times)</div>","html":"<h2 id=\"reusing-a-name\">Reusing a name</h2>\n<h3 id=\"repeated-additions\">Repeated additions</h3>\n<p>Delete the code on the left. Type in this code:</p>\n<pre><code>first-number: 1\nwrite(first-number 600 200 &quot;black&quot;)\n\nsecond-number: add(first-number 2)\nwrite(second-number 600 230 &quot;black&quot;)\n</code></pre><p>You created <code>second-number</code> by giving <code>first-number</code> and <code>2</code> to the <code>add</code> action.  That is, you created a number from an existing name and gave that number a new name.</p>\n<h3 id=\"reusing-a-name\">Reusing a name</h3>\n<p>But why bother making a new name? Why not just reuse the old one? Change the code on the left to this:</p>\n<pre><code>number: 1\nwrite(number 600 200 &quot;black&quot;)\n\nnumber: add(number 2)\nwrite(number 600 230 &quot;black&quot;)\n</code></pre><p>Do you see how <code>number</code> was reused as the name of the result of adding <code>number</code> and <code>2</code>? Why is that useful? Let&#39;s find out...</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-naming-the-result-of-an-action-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-doing-an-action-a-lot-of-times-doing-an-action-a-lot-of-times-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-naming-the-result-of-an-action');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-doing-an-action-a-lot-of-times');\">Doing an action a lot of times →</a></div></h3>\n","slug":"first-reusing-a-name"},"first-doing-an-action-a-lot-of-times":{"string":"## Doing an action a lot of times\n\nWhen you reused the `number` name, you could focus on the adding, rather than the naming.  This will come in useful now.  You are going to create your first animation. Delete the code on the left. Type in the code below:\n\n```\nnumber: 1\n\nforever {\n  number: add(number 1)\n\n  clear-screen()\n  write(number 600 200 \"black\")\n}\n```\n\nWhat is happening here?\n\n`1` is named `number`.  There is something about a `forever`, whatever that is.  `1` is added to `number` and the result, `2`, is named `number`.\n\nThe `clear-screen` action clears the screen. (The screen is already clear, so this is pointless, but you'll see why that line is there in a second.)\n\n`number` is written to the screen.\n\nThis is where `forever` comes in.  The `forever` jumps the code back up to the line with the `add` action. Again, `1` is added to `number` and the result, `3`, is named `number`.\n\nThe screen is cleared. So the old number that was written to the screen is cleared away. `number` is written to the screen again.  The `forever` jumps the code back...and so on.\n\n### Running your code step by step\n\nThis progression of events is quite complicated.  You can use the Code Lauren player controls to see a clearer picture of how your code runs.  Click <button class=\"example-pause-button\"></button> at the top of the page to make your program pause.  Now use <button class=\"example-step-backwards-button\"></button> and <button class=\"example-step-forwards-button\"></button> to see your code run step by step.\n\n ### [← Previous](#first-reusing-a-name) <div class=\"next\">[Moving an oval →](#first-moving-an-oval)</div>","html":"<h2 id=\"doing-an-action-a-lot-of-times\">Doing an action a lot of times</h2>\n<p>When you reused the <code>number</code> name, you could focus on the adding, rather than the naming.  This will come in useful now.  You are going to create your first animation. Delete the code on the left. Type in the code below:</p>\n<pre><code>number: 1\n\nforever {\n  number: add(number 1)\n\n  clear-screen()\n  write(number 600 200 &quot;black&quot;)\n}\n</code></pre><p>What is happening here?</p>\n<p><code>1</code> is named <code>number</code>.  There is something about a <code>forever</code>, whatever that is.  <code>1</code> is added to <code>number</code> and the result, <code>2</code>, is named <code>number</code>.</p>\n<p>The <code>clear-screen</code> action clears the screen. (The screen is already clear, so this is pointless, but you&#39;ll see why that line is there in a second.)</p>\n<p><code>number</code> is written to the screen.</p>\n<p>This is where <code>forever</code> comes in.  The <code>forever</code> jumps the code back up to the line with the <code>add</code> action. Again, <code>1</code> is added to <code>number</code> and the result, <code>3</code>, is named <code>number</code>.</p>\n<p>The screen is cleared. So the old number that was written to the screen is cleared away. <code>number</code> is written to the screen again.  The <code>forever</code> jumps the code back...and so on.</p>\n<h3 id=\"running-your-code-step-by-step\">Running your code step by step</h3>\n<p>This progression of events is quite complicated.  You can use the Code Lauren player controls to see a clearer picture of how your code runs.  Click <button class=\"example-pause-button\"></button> at the top of the page to make your program pause.  Now use <button class=\"example-step-backwards-button\"></button> and <button class=\"example-step-forwards-button\"></button> to see your code run step by step.</p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-reusing-a-name-previous-a-div-class-next-a-href-onclick-pub-loadhelppage-event-first-moving-an-oval-moving-an-oval-a-div-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-reusing-a-name');\">← Previous</a> <div class=\"next\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-moving-an-oval');\">Moving an oval →</a></div></h3>\n","slug":"first-doing-an-action-a-lot-of-times"},"first-moving-an-oval":{"string":"## Moving an oval\n\nOn the previous page, you did your first animation. But animating a shape is even more fun. Let's do that! Delete the code on the left. Type in this code:\n\n```\nleft-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n  draw-oval(left-dist 300 30 30 \"filled\" \"blue\")\n}\n```\n\nThis code is extremely similar to the code on the previous page.  The main difference is that the number that gets changed is used to describe the distance of the center of an oval from the left of the screen.\n\nAgain, if you're not sure how this code works, use the play controls at the top of the screen. Walk through the code step by step to see the sequence of events.\n\n### Next\n\nThat's the end of this tutorial. You've covered a lot. I'll publish [more tutorials](#tutorials) very soon. Please send feedback on things that could be better about Code Lauren to [mary@maryrosecook.com](mailto:mary@maryrosecook.com)\n\n ### [← Previous](#first-doing-an-action-a-lot-of-times) ","html":"<h2 id=\"moving-an-oval\">Moving an oval</h2>\n<p>On the previous page, you did your first animation. But animating a shape is even more fun. Let&#39;s do that! Delete the code on the left. Type in this code:</p>\n<pre><code>left-dist: 1\n\nforever {\n  left-dist: add(left-dist 1)\n\n  clear-screen()\n  draw-oval(left-dist 300 30 30 &quot;filled&quot; &quot;blue&quot;)\n}\n</code></pre><p>This code is extremely similar to the code on the previous page.  The main difference is that the number that gets changed is used to describe the distance of the center of an oval from the left of the screen.</p>\n<p>Again, if you&#39;re not sure how this code works, use the play controls at the top of the screen. Walk through the code step by step to see the sequence of events.</p>\n<h3 id=\"next\">Next</h3>\n<p>That&#39;s the end of this tutorial. You&#39;ve covered a lot. I&#39;ll publish <a href=\"#\" onclick=\"pub.loadHelpPage(event, 'tutorials');\">more tutorials</a> very soon. Please send feedback on things that could be better about Code Lauren to <a href=\"mailto:mary@maryrosecook.com\">mary@maryrosecook.com</a></p>\n<h3 id=\"-a-href-onclick-pub-loadhelppage-event-first-doing-an-action-a-lot-of-times-previous-a-\"><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-doing-an-action-a-lot-of-times');\">← Previous</a></h3>\n","slug":"first-moving-an-oval"},"first-index":{"string":"## Your first program - roll a ball across the screen\n\nIn this tutorial, you'll write some code that rolls a ball across the screen.  Start by clicking on \"Draw an oval\" below:\n\n1. [Draw an oval](#first-draw-an-oval)\n1. [Draw lots of ovals](#first-draw-lots-of-ovals)\n1. [Draw a rectangle](#first-draw-a-rectangle)\n1. [Naming things](#first-naming-things)\n1. [Writing text](#first-writing-text)\n1. [Adding numbers](#first-adding-numbers)\n1. [Naming the result of an action](#first-naming-the-result-of-an-action)\n1. [Reusing a name](#first-reusing-a-name)\n1. [Doing an action a lot of times](#first-doing-an-action-a-lot-of-times)\n1. [Moving an oval](#first-moving-an-oval)\n","html":"<h2 id=\"your-first-program-roll-a-ball-across-the-screen\">Your first program - roll a ball across the screen</h2>\n<p>In this tutorial, you&#39;ll write some code that rolls a ball across the screen.  Start by clicking on &quot;Draw an oval&quot; below:</p>\n<ol>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-an-oval');\">Draw an oval</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-lots-of-ovals');\">Draw lots of ovals</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-draw-a-rectangle');\">Draw a rectangle</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-naming-things');\">Naming things</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-writing-text');\">Writing text</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-adding-numbers');\">Adding numbers</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-naming-the-result-of-an-action');\">Naming the result of an action</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-reusing-a-name');\">Reusing a name</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-doing-an-action-a-lot-of-times');\">Doing an action a lot of times</a></li>\n<li><a href=\"#\" onclick=\"pub.loadHelpPage(event, 'first-moving-an-oval');\">Moving an oval</a></li>\n</ol>\n","slug":"first-index"}}